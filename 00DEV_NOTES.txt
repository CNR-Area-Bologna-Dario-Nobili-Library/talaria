NOTIFICATIONS:

https://laravel.com/docs/6.x/notifications

- classes in App\Notifications 
- stored in db + send by mail 
- support for MarkDown template or simple text
- support for translation(using user's preferred lang by using Locale)
- can support "queuing" implementing ShouldQueue + use Queueable
- for each notification we can decide how send it specifing this in the "via" method ("mail"|"database") otherwise it will use the default BaseNotification's via() method
that define that is looks at the user's preferNotifiedBy method!
- every notification should implement "toXXX" method for every kind of send! (toMail,toMarkDawn)
- implement toArray method to store on DB
- all notification inherit from BaseNotification  
- can be implemented for any model


User:
- implements Notifiable trait => we can send notification (email/db) to him
- implements preferNotifiedBy in which we define how we send notification (by deafult only stored in DB)
- can decide to which "email field" send email overriding "routeNotificationForMail" 

DD:
notification to users/patron/operators by StatusChange 

We can send notification (mail) to a group of users using "Notification::send" facade or $user->notify()

=> WE HAVE TO DECIDE, FOR EACH NOTIFICATION, HOW WE'VE TO notify OR LET user decide how
(in this case we must let user chooser any notification type and store settings.....)
=> WE have to review/fix Notifications frontend management (update,read,clear ...)


MAIL:
- already configured in laravel (SMTP,...)
- passw recovery mail by "broker" (and translated!)
- we can use class MailMessage and Mailable class
  - create msg text, specify sender/rscv,  add attach ..., 
  - can use a template
  - can use MarkDown 
  - translate it
  - send mail by Mail::to()->send(<myMailableClassObject)

OPERATOR's email
- invitation=> notify to user by email => se siamo in grado di mandare mail diversa x invito operatore nuovo o esistente => mandiamo link a /signup o /index o /user/dashboar altrimenti mandiamo sempre link a index
tanto da li vede gli inviti
- operator accepted/rejected => notification to all library's operators? or send mail just to library's email address ?

---------------------------------------------



OPERATORS:
- admin can only READ, CommManager can EDIT permissions: implementare controlli a liv di api
(NOTE: in basePolicy c'e' il "before"  =>   if ($user->hasRole('super-admin')||$user->hasRole('manager')) return true; !!!
quindi non c'e' distinzione, a meno che non si faccia una policy specifica x l'admin!) 

  
----------------------

Policy NOTEs:

# Inside a controllers
- in a function "function foo()"
  if you call $this->authorize($mymodel) will call Gate::authorize($mymodel, "foo") that will call mymodel's Policy "foo" method!

Actually in the Dispatcher we've implemented that, for ALL methods inside `Dispatcher` we call $this->authorize 
so it means that for every Dispatcher's methods we'll call the corrisponding Policy methods 
in which we can decide which is authorized or not

Bye default when controller call authorize() it will check on DB if user "can" have the authorization otherwise it will check for Policy's specific method
if found it run it otherwise return false !!!


# Inside Transformer
- i can specify 
   protected $policy = [   
        'view-roles' => ['roles','resources','tempresources']
    ];

  in order to let the system to check (by calling Model's Policy 'viewRoles' method ) if the user is authorized to get the field or the "included fields" (returned by transformer if requested by "?include=xxx") 
   specified in the $policy array! 
  (note that the viewRoles functions is called by the BaseTransformer who checks for $policy array and verify user->cannot(xxx))
  
  if disallow_policy=true => no policy applied so all fields/includes are returned