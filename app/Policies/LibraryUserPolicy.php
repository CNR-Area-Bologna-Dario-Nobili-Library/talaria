<?php

namespace App\Policies;

use App\Policies\BasePolicy;
use App\Models\Users\User;
use Illuminate\Auth\Access\HandlesAuthorization;
use Illuminate\Database\Eloquent\Model;

class LibraryUserPolicy extends BasePolicy
{
    /**
     * Create a new policy instance.
     *
     * @return void
     */
    public function __construct()
    {
        //
    }

    public function create(User $user, Model $model)
    {
        return true;
    }

    public function show(User $user, Model $model)
    {
        //return $this->canManage($user, $model) || $this->canManage($user, $model->institution);

        //l'utente della biblio o la biblio possono vedere i dati
        return ($model->user_id==$user->id||$this->canManage($user,$model));

    }


    public function update(User $user, Model $model)
    {
        //return $this->canManage($user, $model);// || parent::update($user, $model); // TODO: Change the autogenerated stub

        //l'utente della biblio o la biblio possono modificare i dati
        return ($model->user_id==$user->id||$this->canManage($user,$model));
    }

    public function canManage(User $user, Model $model)
    {
        //se esiste l'ability "manage-users" sul db per la biblio del model -> ok
        //altrimenti viene chiamato manageUsers della LibraryPolicy che non fa altro che verificare se Ã¨ un manager
        //in questo modo sia manage che manage-users sono abilitati!
        return $user->can('manage-users', $model->library);
    }
}
